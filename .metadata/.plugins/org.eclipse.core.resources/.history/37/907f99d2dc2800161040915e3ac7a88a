package com.cwenhui.chowhound.widget;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.cwenhui.chowhound.adapter.CommonAdapter;
import com.cwenhui.chowhound.bean.CommonBean;
import com.cwenhui.chowhound.utils.ViewHolder;
import com.example.chowhound.R;
import com.example.chowhound.R.drawable;

import android.content.Context;
import android.graphics.drawable.BitmapDrawable;
import android.util.Log;
import android.view.Display;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.SimpleAdapter;
import android.widget.TextView;

public class CategoryQuickAction extends PopupWindow {
	public static final String TAG = "CategoryQuickAction";
	private Context context;
	private BitmapDrawable mBackground;												//QuickAction背景色
	private Display mDefaultDisplay;												//用于获取屏幕宽度、高度等信息
	private int[] mAnchorLocations;													//控制QuickAction显示的控件(按钮之类的)的位置
	private int mScreenWidth;														//屏幕宽
	private int mScreenHeight;														//屏幕高
	private LayoutInflater mInflater;
	private ViewGroup mRootView;													//QuickAction的根布局
	private ListView lvParentCategory, lvChildCategory;								//一级菜单列表和二级菜单列表
	private CommonAdapter<CommonBean> parentAdapter;
	private CommonAdapter<String> childAdapter;						//一级菜单列表和二级菜单列表的适配器
	private List<CommonBean> parents;
	private Map<String, List<String>> children;
//	private List<String> children;
//	private OnClickQuickActionListener mClickListener;								//QuickAction监听
	
	public CategoryQuickAction(Context context) {
		super(context);
		this.context = context;
		WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
		mDefaultDisplay = wm.getDefaultDisplay();
		mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		
		initParams();
		// Quick Action 布局
		initData();
		initQuickAction(context);
	}
	
	private void initData(){
		String[] parent = new String[]{"全部","快餐便当","特色菜系","小吃夜宵","甜品饮品","果蔬生鲜","鲜花蛋糕","商店超市"};
		String[][] childs = new String[][]{{},{"全部","品牌快餐","盖浇饭","中式炒菜","汉堡","米粉面馆","麻辣烫","包子粥店","生煎锅贴","饺子混沌","香锅砂锅"},
				{"全部","粤菜","川湘菜","其他菜系","东北菜","云南菜","江浙菜","西北菜","鲁菜"},{"全部"},{"全部"},{"全部"},{"全部"}};
		int[] drawables = new int[]{R.drawable.all_category, R.drawable.fast_food_category, R.drawable.cuisine_features_category,
				R.drawable.supper_category, R.drawable.dessert_category, R.drawable.vegetables_category, R.drawable.cake_category,
				R.drawable.store_category};
		parents = new ArrayList<CommonBean>();
		children = new HashMap<String, List<String>>();
		CommonBean parentBean;
		for (int i = 0; i < 8; i++) {
			parentBean = new CommonBean(parent[i], drawables[i]);
			parents.add(parentBean);
		}
		for (int j = 0; j < childs.length; j++) {
			List<String> child = new ArrayList<String>();
			for (int q = 0; q < childs[j].length; q++) {
				Log.e("test", "j "+j+"  q "+q);
				child.add(childs[j][q]);
			}
			children.put(parent[j], child);
		}
		Log.e("------->", "-----------childs.length"+children.size());
		Log.e("-------->", "-------------children.get(\"快餐便当\").size"+children.get("特色菜系").size());
		
		parentAdapter = new CommonAdapter<CommonBean>(context, parents, R.layout.item_fragment_index_parent_category) {

			@Override
			public void convert(ViewHolder holder, CommonBean bean) {
				TextView item = holder.getView(R.id.tv_item_fragment_index_parent_category);
				item.setText(bean.getText());
				item.setCompoundDrawablesWithIntrinsicBounds(context.getResources().getDrawable(bean.getResource()), null, null, null);
			}
		};
		
		childAdapter = new CommonAdapter<String>(context, children.get("快餐便当"), R.layout.item_fragment_index_parent_category) {

			@Override
			public void convert(ViewHolder holder, String t) {
				holder.setText(R.id.tv_item_fragment_index_parent_category, t);
			}
		};
	}
	
	private void initQuickAction(Context context) {
		mRootView = (ViewGroup) mInflater.inflate(R.layout.layout_category_quickaction, null);
		mRootView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
		lvParentCategory = (ListView) mRootView.findViewById(R.id.lv_category_quickaction_parent);
		lvChildCategory = (ListView) mRootView.findViewById(R.id.lv_category_quickaction_child);
		
		lvParentCategory.setAdapter(parentAdapter);
		lvChildCategory.setAdapter(childAdapter); 
		
		setListViewHeightBasedOnChildren(lvParentCategory, lvChildCategory);

		lvParentCategory.setOnItemClickListener(new ParentCategoryItemClickListener());
		lvChildCategory.setOnItemClickListener(new ChildCategoryItemClickListener());
		setContentView(mRootView);
	}

	private void initParams() {
		// 点击在PopupWindow外时，dismiss popup window
		setTouchInterceptor(new OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if (event.getAction() == MotionEvent.ACTION_OUTSIDE) {
					dismiss();
					return true;
				}
				return false;
			}
		});
	
		// 设置相关属性
		setFocusable(true);
		setTouchable(true);
		setOutsideTouchable(true);
	
		// 设置动画效果
		setAnimationStyle(R.style.quickaction);

		// 宽高自适应
		setWidth(WindowManager.LayoutParams.WRAP_CONTENT);
		setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
	}
	
	/**
	 * 显示Quick Action
	 * @param anchor
	 */
	public void show(View anchor) { 
//		Log.e(TAG, "show2:"+mItems.size());
		if (!isShowing()) {
			Direction showDirection = computeDisplayPosition(anchor);			// 位置
			int[] locations = preShow(anchor, showDirection);					// 根据位置，显示箭头
			if (locations != null) {											// 显示PopupWindow
				showAtLocation(anchor, Gravity.NO_GRAVITY, locations[0], locations[1]);
			}
//			Log.e(TAG, "locations[0]"+locations[0]+"locations[1]"+locations[1]);
		} else {
			dismiss();
		}
	}
	
	/**
	 * Popup Window自动放置（支持上下左右四个位置）。
	 */
	protected Direction computeDisplayPosition(View anchor) {

		Direction showDirection = null;

		mAnchorLocations = new int[2];
		// 获取针对整个Window的绝对位置
		anchor.getLocationOnScreen(mAnchorLocations);

		mScreenWidth = mDefaultDisplay.getWidth();
		mScreenHeight = mDefaultDisplay.getHeight();

		mRootView.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
		int popupWidth = mRootView.getMeasuredWidth();
		int popupHeight = mRootView.getMeasuredHeight();

		// ？ 计算有点问题，没有减去状态栏和标题栏的高度
		
		// QuickAction可以显示在anthor上下左右，但仅能显示在一侧
		boolean canShowTop = mAnchorLocations[1] - popupHeight > 0;
		boolean canShowBottom = mAnchorLocations[1] + anchor.getHeight() + popupHeight < mScreenHeight; 
		boolean canShowRight = mAnchorLocations[0] + anchor.getWidth() + popupWidth < mScreenWidth;
		boolean canShowLeft = mAnchorLocations[0] - popupWidth > 0;
		
//		Log.e(TAG, "popupWidth"+popupWidth+"   popupHeight"+popupHeight);

		if(canShowTop && canShowBottom){
			if(mAnchorLocations[1] - popupHeight > (mScreenHeight-mAnchorLocations[1] - anchor.getHeight() - popupHeight)){
				showDirection = Direction.TOP;
			}else{
				showDirection = Direction.BOTTOM;
			}
		}else if (!canShowTop && canShowBottom) {
			showDirection = Direction.BOTTOM;
		}else if (canShowTop && !canShowBottom) {
			showDirection = Direction.TOP;
		}else if(!canShowBottom && !canShowTop){
			if(canShowLeft && canShowRight){
				if(mAnchorLocations[0] - popupWidth > mScreenWidth-mAnchorLocations[0]-anchor.getWidth()-popupWidth){
					showDirection = Direction.LEFT;
				}else{
					showDirection = Direction.RIGHT;
				}
			}else if(!canShowLeft && canShowRight){
				showDirection = Direction.RIGHT;
			}else if(canShowLeft && !canShowRight){
				showDirection = Direction.LEFT;
			}
		}
//		Log.e(TAG, "showDirection:"+showDirection);
		return showDirection;
	}

	protected int[] preShow(View anchor, Direction showDirection) {
		
		if (mBackground == null) {
			// 默认设置为透明
			setBackgroundDrawable(new BitmapDrawable());
		} else {
			setBackgroundDrawable(mBackground);
		}
		
		if (showDirection == null) {
			return null;
		}
		
		int[] locations = new int[2]; 
		
//		LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) 
//				mQuickActionLayout.getLayoutParams();
		
		int anchorCenterX = 0;
		int anchorCenterY = 0;
		
		// * 上下箭头如果设置为gone，获取popup window height会总是在变动
		switch (showDirection) {
		case TOP:
//			params.setMargins(0, 0, 0, -6);
			mRootView.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			anchorCenterX = mAnchorLocations[0] + anchor.getWidth() / 2;
			
			locations[0] = anchorCenterX - mRootView.getMeasuredWidth() / 2;
			locations[1] = mAnchorLocations[1] - mRootView.getMeasuredHeight();
			
			if (locations[0] <= 0) {
				locations[0] = 0;
			} else if (locations[0] + mRootView.getMeasuredWidth() >= mScreenWidth) {
				locations[0] = mScreenWidth - mRootView.getMeasuredWidth();
			}
			
			break;
			
		case BOTTOM:
			// 中间
//			params.setMargins(0,0, 0, 0);
			mRootView.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			anchorCenterX = mAnchorLocations[0] + anchor.getWidth() / 2;
			
			// Popup Window
			locations[0] = anchorCenterX - mRootView.getMeasuredWidth() / 2;
			locations[1] = mAnchorLocations[1] + anchor.getHeight();
			
			if (locations[0] <= 0) {
				locations[0] = 0;
			} else if (locations[0] + mRootView.getMeasuredWidth() >= mScreenWidth) {
				locations[0] = mScreenWidth - mRootView.getMeasuredWidth();
			}
			
			break;
			
		case LEFT:
//			params.setMargins(0, 0, mScreenWidth-mAnchorLocations[0], 0);
			mRootView.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			
			anchorCenterY = mAnchorLocations[1] + anchor.getHeight() / 2;
			
			locations[0] = mAnchorLocations[0] - mRootView.getMeasuredWidth();
			locations[1] = anchorCenterY - mRootView.getMeasuredHeight() / 2;
			
			if (locations[1] <= 0) {
				locations[1] = 0;
			} else if (locations[1] + mRootView.getMeasuredHeight() >= mScreenHeight) {
				locations[1] = mScreenHeight - mRootView.getMeasuredHeight();
			}			
			
			break;
			
		case RIGHT:
			mRootView.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			
			anchorCenterY = mAnchorLocations[1] + anchor.getHeight() / 2;
			
			locations[0] = mAnchorLocations[0] + anchor.getWidth();
			locations[1] = anchorCenterY - mRootView.getMeasuredHeight() / 2;
			
			if (locations[1] <= 0) {
				locations[1] = 0;
			} else if (locations[1] + mRootView.getMeasuredHeight() >= mScreenHeight) {
				locations[1] = mScreenHeight - mRootView.getMeasuredHeight();
			}			
			break;
		}
		return locations;
	}
	
	/**
	* 动态设置ListView的高度
	* @param parent
	*/
	public static void setListViewHeightBasedOnChildren(ListView parent, ListView child) {
		Log.e("123", "------------");
	    if(parent == null) return;
	    Log.e("adfs", "fsadfdfdfdfdfdf");
	    ListAdapter listAdapter = parent.getAdapter();
	    if (listAdapter == null) {
	        // pre-condition
	        return;
	    }
	    int totalHeight = 0;
	    for (int i = 0; i < listAdapter.getCount(); i++) {
	        View listItem = listAdapter.getView(i, null, parent);
	        listItem.measure(0, 0);
	        totalHeight += listItem.getMeasuredHeight();
	    }
	    ViewGroup.LayoutParams params = parent.getLayoutParams();
	    ViewGroup.LayoutParams childParams = child.getLayoutParams();
	    params.height = totalHeight + (parent.getDividerHeight() * (listAdapter.getCount() - 1));
	    childParams.height = params.height;
	    Log.e("----------", childParams.height+"<--------------------"+params.height);
	    parent.setLayoutParams(params);
	    child.setLayoutParams(childParams);
	}
	
	public enum Direction {
		LEFT, RIGHT, TOP, BOTTOM
	}
	
	class ParentCategoryItemClickListener implements OnItemClickListener{

		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			
		}
		
	}
	
	class ChildCategoryItemClickListener implements OnItemClickListener{

		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			
		}
		
	}
}
